generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  username       String          @unique
  password       String
  birthday       DateTime?
  createdAt      DateTime        @default(now())
  description    String?
  occupation     String?
  profileName    String?
  publicEmail    String?
  publicWebsite  String?
  tagline        String?
  updatedAt      DateTime        @updatedAt
  countryId      Int?
  cityId         Int?
  birthplace     String?
  status         Status?
  socialLinks    SocialLinks[]
  Jobs           Job[]
  refreshToken   String?
  recoveryEmail String?
  recoveryPhone String?
  city           City?           @relation(fields: [cityId], references: [id])
  country        Country?        @relation(fields: [countryId], references: [id])
  Entertainments Entertainment[] @relation("EntertainmentToUser")
  Answers Answers[]

  @@index([countryId])
  @@index([cityId])
}

model Country {
  id        Int    @id @default(autoincrement())
  shortname String
  name      String
  phonecode Int
  city      City[]
  user      User[]
}

model City {
  id        Int     @id @default(autoincrement())
  name      String
  countryId Int
  country   Country @relation(fields: [countryId], references: [id])
  user      User[]

  @@index([countryId])
}

model Entertainment {
  id    Int                 @id @default(autoincrement())
  title String              @unique
  type  EentertainmentTypes
  Users User[]              @relation("EntertainmentToUser")
}



model Job {
  id           Int     @id @default(autoincrement())
  titleOrPlace String
  year         Int
  endYear      Int
  description  String?
  userId       Int
  user         User    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model SocialLinks {
  id        Int      @id @default(autoincrement())
  link      String
  platform  Platform
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}


model Questions {
  id Int @id @default(autoincrement())
  content String
  answers Answers[]
}

model Answers {
  id  Int @id @default(autoincrement())
  answer String
  userId Int
  questionId Int
  user User @relation(fields: [userId],references: [id])
  question Questions @relation(fields: [questionId],references: [id])

  @@index([questionId])
  @@index([userId])
}


enum Platform {
  FACEBOOK
  TWITTER
  LINKEDIN
  INSTAGRAM
  TWITCH
  GOOGLEPLUS
  YOUTUBE
  PATREON
  DISCORD
  DEVIANTART
  BEHANCE
  DRIBBBLE
  ARTSTATION
  PINTEREST
}
enum Status {
  SINGLE
  TAKEN
}

enum EentertainmentTypes {
  TV_SHOWS
  MUSIC_ARTISTS
  MOVIES
  BOOKS
  GAMES
  HOBBIES
}